services:
    # Django Service
    social_media_api_app:
      restart: always

      image: dissom/social_media_api
      build:
        context: .
      command: >
        sh -c "python manage.py wait_for_db &&
              python manage.py migrate &&
              python manage.py runserver 0.0.0.0:8000"
      volumes:
          - ./:/social_media_api
      ports:
        - "4000:8000"
      env_file:
        - .env
      depends_on:
          - social_db

    # Celery Service
    celery:
      restart: on-failure
      build:
        context: .
        dockerfile: Dockerfile
      command: >
                sh -c "python manage.py wait_for_db &&
                celery -A social_media_api worker -l INFO"
      env_file:
        - .env
      depends_on:
        - social_media_api_app
        - social_db
        - redis

    # Celery Beat
    celery-beat:
      restart: on-failure
      build:
        context: .
        dockerfile: Dockerfile
      command: >
                sh -c "python manage.py wait_for_db &&
                celery -A social_media_api beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
      env_file:
        - .env
      depends_on:
        - social_media_api_app
        - social_db
        - redis

    # PostgreSQL Database Service
    social_db:
      restart: always
      image: postgres:16.3-alpine3.20
      ports:
        - "5433:5432"
      env_file:
        - .env
      volumes:
        - ./data/db:/var/lib/postgresql/data/

    # Redis Service
    redis:
        image: "redis:alpine"
        ports:
          - "6378:6379"

    # Flower
    flower:
        restart: on-failure
        build:
            context: .
            dockerfile: Dockerfile
        ports:
            - "5555:5555"
        command: >
                sh -c "python manage.py wait_for_db && celery -A social_media_api flower --address=0.0.0.0"
        depends_on:
            - celery
        env_file:
            - .env
